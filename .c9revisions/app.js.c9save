{"ts":1401248516328,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var path = require('path')\n  , flatiron = require('flatiron')\n  , plates = require('plates')\n  , restful = require('restful')\n  , views = require('./app/plugins/plates.js')\n  , smoke = require('./app/plugins/helpers/index.js')\n  , skyNetServer = require('./app/plugins/skyNetServer')\n  , app = module.exports = flatiron.app\n  , env = process.env.NODE_ENV || 'development';\n\nvar flatiron2 = require('flatiron');\nvar childservice = app.childservice = flatiron2.app;\n\n\n\nvar extensions = require('./app/plugins/extensions.js');\nvar cmd = require('./app/plugins/cmd.js');\nvar app2 = {};\n\n\n\n var portnum = 26000;\n\n  var controllers = require('./app/plugins/controllers.js')\n    // Configuration file\n    app.config.defaults({\n        \"port\": portnum\n      , \"restful\": {\n            \"strict\": true\n          , \"explore\": true\n          , \"prefix\": \"api\"\n        }\n      , \"resourceful\": {\n            \"engine\": \"mongodb\"\n          , \"uri\": \"mongodb://localhost/vishnu\"\n        }\n    })\n    \n    // Load HTTP plugin\n    app.use(flatiron.plugins.http, {\n        \n      \n      headers: {\n        'x-powered-by': 'flatiron-' + flatiron.version\n      }\n    })\n    \n    \n    app.use(flatiron.plugins.static, {dir: './app/public', url: '/assets'});\n    \n    app.router.get('/headers', function () {\n      this.res.json(this.req.headers);\n    });\n    \n    // Use resourceful plugin, automatically loads resources\n    //app.use(flatiron.plugins.resourceful, {})\n    \n    // Use plates plugin to support layouts and views\n    app.use(views, { root: __dirname })\n    \n    app.use(extensions, { root: __dirname })\n    \n    // Use controllers plugin to set up routes\n    app.use(controllers, { root: __dirname })\n    \n    app.use(cmd, { root: __dirname })\n    // Use RESTful Director\n    app.use(restful, app.config.get('restful') || {})\n    \n    // Start app\n    app.start(portnum || 26000, function (err) {\n      if (err) {\n        app.log.err(err)\n        console.trace()\n    \tprocess.exit(1)\n      }\n      var addr = app.server.address()\n      app.log.info('Server started on http://' + addr.address + ':' + addr.port + ' in ' + env);\n     \n     \n    })\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2141}]],"length":2141}
{"contributors":[],"silentsave":false,"ts":1401251819407,"patch":[[{"diffs":[[0,"2.app;\n\n"],[1,"\nvar webRTC = require('webrtc.io').listen(app);"],[0,"\n\nvar ex"]],"start1":457,"start2":457,"length1":16,"length2":63}]],"length":2188,"saved":false}
{"ts":1401251925695,"patch":[[{"diffs":[[0,"|| {})\n    \n"],[1,"    webRTC.rtc.on('chat_msg', function(data, socket) {\n  var roomList = webRTC.rtc.rooms[data.room] || [];\n\n    for (var i = 0; i < roomList.length; i++) {\n    var socketId = roomList[i];\n\n    if (socketId !== socket.id) {\n      var soc = webRTC.rtc.getSocket(socketId);\n\n      if (soc) {\n        soc.send(JSON.stringify({\n          \"eventName\": \"receive_chat_msg\",\n          \"data\": {\n            \"messages\": data.messages,\n            \"color\": data.color\n          }\n        }), function(error) {\n          if (error) {\n            console.log(error);\n          }\n        });\n      }\n    }\n  }\n});\n\n"],[0,"    // Start"]],"start1":1859,"start2":1859,"length1":24,"length2":625}]],"length":2789,"saved":false}
{"ts":1401253867683,"patch":[[{"diffs":[[0," || [];\n"],[1,"console.log(\"got connection.\");"],[0,"\n    for"]],"start1":1970,"start2":1970,"length1":16,"length2":47}]],"length":2820,"saved":false}
