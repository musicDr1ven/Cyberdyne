{"ts":1401159276579,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var path = require('path'),\n    fs = require('fs'),\n    flatiron = require('flatiron'),\n    common = flatiron.common,\n    existsSync = fs.existsSync || path.existsSync\n\nvar childProcess = require('child_process');\nvar editorProcess = require('child_process');\nexports.name = 'cmd';\nrequire('shelljs/global');\nvar editor = {};\nvar rootDir = \"\";\nvar childsystem = {};\nvar serverStatus = false;\nvar editorStatus = false;\nexports.attach = function (options) {\n  var app = this\n  options = options || {}\n\n  //\n  // Accept string `options`.\n  //\n  if (typeof options === 'string')\n    options = { root: options }\n\n  app.cmd = app.cmd || {}\n\n\n  if (options.dir || options.root || app.root) {\n    app._cmdDir = options.dir\n      || path.join(options.root || app.root, 'app', 'controllers')\n\n    try {\n      existsSync(app._cmdDir);\n     \n    }\n    catch (err) {\n      console.error('invalid cmd path: ' + app._cmdDir)\n      return\n    }\n\n    rootDir = app._cmdDir;\n    \n      app.cmd[\"testMe\"] = testMe;\n      app.cmd[\"getServerStatus\"] = getServerStatus;\n      app.cmd[\"openEditor\"] = openEditor;\n      \n     \n      app.cmd[\"closeEditor\"] = killEditor;\n    \n    \n      app.cmd[\"startChildSystem\"] = startChildSystem;\n  \n  \n      app.cmd[\"endChildSystem\"] = endChildSystem;\n    // console.log(\"cmd connected: \" + app.cmd.startChildSystem.toString());\n      console.log(\"here is testme :\" +  app.cmd.testMe());\n  }\n}\n\nfunction testMe()\n{\n    \n    \n    return \"you got test me\";\n}\nfunction getServerStatus()\n{\n    return serverStatus;\n    \n    \n}\nfunction startChildSystem()\n{\n    \n\n childsystem = childProcess.fork('app.js', function (error, stdout, stderr) {\n   if (error) {\n     console.log(error.stack);\n     console.log('Error code: '+error.code);\n     console.log('Signal received: '+error.signal);\n   }\n   console.log('Child Process STDOUT: '+stdout);\n   console.log('Child Process STDERR: '+stderr);\n });\n\n childsystem.on('exit', function (code) {\n   console.log('Child process exited with exit code '+code);\n });\n    childsystem.on(\"SIGTERM\", function () {\n    childProcess.emit(\"SIGTERM\");\n  });\n   \n\n}\nfunction endChildSystem()\n{\n   \n  childsystem.kill(\"SIGTERM\");\n  childsystem.kill(\"SIGINT\");\n  \n  \n\n\n\n// And the exit event shuts down the child.\n\n \n \n// This is a somewhat ugly approach, but it has the advantage of working\n// in conjunction with most of what third parties might choose to do with\n// uncaughtException listeners, while preserving whatever the exception is.\n\n  // If this was the last of the listeners, then shut down the child and rethrow.\n  // Our assumption here is that any other code listening for an uncaught\n  // exception is going to do the sensible thing and call process.exit().\n \n\n   \n    serverStatus = false;\n}\nfunction openEditor()\n{\n      //node server.js \"$@\" -a x-www-browser\n     var dir = __dirname;\n    dir = dir.replace('/app/plugins', '/cloud9')\n   // cd(dir);\n    //path.join(options.root || app.root, 'app', 'controllers')\nconsole.log(dir + '/bin/cloud9.sh');\n\n   editor = editorProcess.exec(dir + '/bin/cloud9.sh -w ../', function (error, stdout, stderr) {\n   if (error) {\n     console.log(error.stack);\n     console.log('Error code: '+error.code);\n     console.log('Signal received: '+error.signal);\n   }\n   console.log('Child Process STDOUT: '+stdout);\n   console.log('Child Process STDERR: '+stderr);\n });\n\n editor.on('exit', function (code) {\n   console.log('Child process exited with exit code '+code);\n });\n    editor.on(\"SIGTERM\", function () {\n    editorProcess.emit(\"SIGTERM\");\n  });\n  \n    editor = exec('./cloud9.sh -w \"../../\"', {async:true});\n    editorStatus = true;\n    editor.stdout.on('data', function(data) {\n\n        console.log(data);\n    });\n\n}\n\n function killEditor()\n{\n    \n     editor.kill(\"SIGTERM\");\n  editor.kill(\"SIGINT\");\n  editorStatus = false;\n    \n}\n\nfunction getStatusOfEditor()\n{\n    \n    return editorStatus;\n  \n    \n}\nexports.init = function (done) {\n  var app = this\n    , options\n\n  //\n  // Attempt to merge defaults passed to `app.use(flatiron.plugins.controllers)`\n  // with any additional configuration that may have been loaded.\n  //\n  options = common.mixin(\n      {}\n    , app.options['cmd']\n    , app.config.get('cmd') || {}\n  )\n\n  app.config.set('cmd', options)\nconsole.log('cmd inited');\n  done()\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":4290}]],"length":4290}
{"contributors":[],"silentsave":false,"ts":1401159381453,"patch":[[{"diffs":[[0,"ss.exec("],[-1,"dir + '"],[1,"'bash cloud9"],[0,"/bin/clo"]],"start1":3027,"start2":3027,"length1":23,"length2":28}]],"length":4295,"saved":false}
{"contributors":[],"silentsave":false,"ts":1401159672643,"patch":[[{"diffs":[[0,"oud9"],[1,"/bin"],[0,"')\n "],[-1,"  //"],[0," cd("]],"start1":2880,"start2":2880,"length1":16,"length2":16},{"diffs":[[0,"llers')\n"],[1,"//"],[0,"console."]],"start1":2958,"start2":2958,"length1":16,"length2":18},{"diffs":[[0,";\n\n "],[-1,"  editor = editorProcess.exec('bash cloud9/bin/cloud9.sh -w ../', function (error, stdout, stderr) {\n   if (error) {\n     console.log(error.stack);\n     console.log('Error code: '+error.code);\n     console.log('Signal received: '+error.signal);\n   }\n   console.log('Child Process STDOUT: '+stdout);\n   console.log('Child Process STDERR: '+stderr);\n });\n\n editor.on('exit', function (code) {\n   console.log('Child process exited with exit code '+code);\n });\n    editor.on(\"SIGTERM\", function () {\n    editorProcess.emit(\"SIGTERM\");\n  });\n  \n    editor = exec('./cloud9.sh -w \"../../\"', {async:true});\n    editorStatus = true;\n    editor.stdout.on('data', function(data) {\n\n        console.log(data);\n    });"],[1,"\n   if (exec('cloud9.sh -w ../').code !== 0) {\n  echo('Error: Git commit failed');\n  exit(1);\n"],[0,"\n\n}\n"]],"start1":3003,"start2":3003,"length1":714,"length2":102}]],"length":3685,"saved":false}
{"ts":1401159768134,"patch":[[{"diffs":[[0,"sh');\n\n "],[-1,"\n   if ("],[1,"var editor = "],[0,"exec('cl"]],"start1":2999,"start2":2999,"length1":24,"length2":29},{"diffs":[[0,"../'"],[-1,").code !== 0) {\n  echo('Error: Git commit failed');\n  exit(1);"],[1,", {async:true});\neditor.stdout.on('data', function(data) {\n  console.log(data);\n});\n\n   "],[0,"\n\n\n}"]],"start1":3039,"start2":3039,"length1":70,"length2":96}]],"length":3716,"saved":false}
{"contributors":[],"silentsave":false,"ts":1401160070516,"patch":[[{"diffs":[[0,"oud9/bin"],[1,"/"],[0,"')\n  cd("]],"start1":2880,"start2":2880,"length1":16,"length2":17},{"diffs":[[0,"9.sh');\n"],[1,"console.log(ls());"],[0,"\n var ed"]],"start1":2998,"start2":2998,"length1":16,"length2":34},{"diffs":[[0,"= exec('"],[1,"./"],[0,"cloud9.s"]],"start1":3037,"start2":3037,"length1":16,"length2":18}]],"length":3737,"saved":false}
{"contributors":[],"silentsave":false,"ts":1401160680636,"patch":[[{"diffs":[[0,"Editor;\n    "],[1,"  app.cmd[\"killEditor\"] = killEditor;"],[0,"\n    \n      "]],"start1":1138,"start2":1138,"length1":24,"length2":61}]],"length":3774,"saved":false}
{"ts":1401162135683,"patch":[[{"diffs":[[0,"ldSystem"],[1,"(app)"],[0,";\n"],[-1,""],[0,"  \n  \n  "]],"start1":1237,"start2":1237,"length1":18,"length2":23},{"diffs":[[0,"ChildSystem("],[1,"app"],[0,")\n{\n    \n\n c"]],"start1":1593,"start2":1593,"length1":24,"length2":27},{"diffs":[[0,"tdout);\n"],[-1,""],[0,"   conso"]],"start1":1886,"start2":1886,"length1":16,"length2":16},{"diffs":[[0,"tderr);\n"],[1,"   app.postal.publishToChannel(\"childapp.out\", stdout);\n    app.postal.publishToChannel(\"childapp.err\", stderr);\n"],[0," });\n\n c"]],"start1":1935,"start2":1935,"length1":16,"length2":129}]],"length":3895,"saved":false}
{"ts":1401162248533,"patch":[[{"diffs":[[0,"\n   "],[-1,"app.postal.publishToChannel(\"childapp.out\", stdout);\n    app.postal.publishToChannel(\"childapp.err\", stderr);"],[0,"\n })"]],"start1":1942,"start2":1942,"length1":117,"length2":8}]],"length":3786,"saved":false}
{"contributors":[],"silentsave":false,"ts":1401245301365,"patch":[[{"diffs":[[0,"var "],[-1,"editorProcess = require('child_proces"],[1,"postal = require('../extensions/postal/index.j"],[0,"s');\n"],[1,"\n"],[0,"expo"]],"start1":214,"start2":214,"length1":50,"length2":60},{"diffs":[[0,"ldSystem"],[-1,"(app)"],[0,""],[1,""],[0,";\n  \n  \n"]],"start1":1247,"start2":1247,"length1":21,"length2":16},{"diffs":[[0,"tem("],[-1,"app"],[0,")\n{\n    "],[1," var dir = __dirname;\n    dir = dir.replace('/app/plugins', '');\n  cd(dir);"],[0,"\n\n c"]],"start1":1606,"start2":1606,"length1":19,"length2":91},{"diffs":[[0,"'+stderr"],[-1,""],[0,""],[1,");\n   postal.publishToChannel(\"subapp.out\", stdout"],[0,");\n   \n "]],"start1":2009,"start2":2009,"length1":16,"length2":66}]],"length":3913,"saved":false}
